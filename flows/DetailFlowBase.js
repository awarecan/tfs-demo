// ------------------------------------------------------------------------------
//      This code was generated by handlebars/grunt.
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// ------------------------------------------------------------------------------

var DetailPage = require('./../pages/DetailPage.js');
var FlowBase = require('./../flows/baseFlow.js');


function DetailFlowBase(checkUrl, goto) {
    checkUrl = checkUrl || false;
    goto = goto || false;
    this.page = new DetailPage();
    FlowBase.call(this, checkUrl, this.page.pageUrl, goto);
};

DetailFlowBase.prototype = new FlowBase();

DetailFlowBase.prototype.constructor = DetailFlowBase;



  // Control functions for BuyLink
  DetailFlowBase.prototype.click_BuyLink = function () {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Buy Link. '+msg);
    });
    this.page.BuyLink.click();
    return this;
  };





  // Wait functions for BuyLink
  DetailFlowBase.prototype.wait_BuyLink_Displayed = function () {
    this.logDebug('Wait until Buy Link displayed');
    this.page.BuyLink.waitPresent(true);
    return this;
  };

  DetailFlowBase.prototype.wait_BuyLink_Disappeared = function () {
    this.logDebug('Wait until Buy Link disappeared');
    this.page.BuyLink.waitForDisappear();
    return this;
  };

  // Assert functions for BuyLink
  DetailFlowBase.prototype.assert_BuyLink_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert Buy Link contains text: ' + text);
    this.assertIsContain(this.page.BuyLink.getText(), text,msgOptions,'Assert Buy Link contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert Buy Link does not contain text: ' + text);
    this.assertIsNotContain(this.page.BuyLink.getText(), text,msgOptions,'Assert Buy Link does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert Buy Link text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.BuyLink.getText(), pattern, msgOptions, 'Assert Buy Link text match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert Buy Link attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.BuyLink.getAttribute(attribute), text,msgOptions,'Assert Buy Link attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert Buy Link attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.BuyLink.getAttribute(attribute), text,msgOptions,'Assert Buy Link attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert Buy Link attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.BuyLink.getAttribute(attribute), pattern,msgOptions,'Assert Buy Link attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert Buy Link is displayed.');
    this.assertTrue(this.page.BuyLink.isDisplayed(),msgOptions,'Assert Buy Link is displayed.');
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert Buy Link is NOT displayed.');
    this.assertFalse(this.page.BuyLink.isDisplayed(),msgOptions,'Assert Buy Link is NOT displayed.');
    return this;
  };

  DetailFlowBase.prototype.get_BuyLink_IsDisplayed = function (callback) {
    this.logDebug('Get Buy Link Displayed state.');
    this.page.BuyLink.isDisplayed().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert Buy Link is enabled.');
    this.assertTrue(this.page.BuyLink.isEnabled(),msgOptions,'Assert Buy Link is enabled.');
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert Buy Link is disabled.');
    this.assertFalse(this.page.BuyLink.isEnabled(),msgOptions,'Assert Buy Link is not enabled.');
    return this;
  };

  DetailFlowBase.prototype.get_BuyLink_IsEnabled = function (callback) {
    this.logDebug('Get Buy Link Enabled state.');
    this.page.BuyLink.isEnabled().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_IsExists = function (msgOptions) {
    //this.logDebug('Assert Buy Link is exists.');
    this.assertTrue(this.page.BuyLink.isPresent(),msgOptions,'Assert Buy Link is exists.');
    return this;
  };

  DetailFlowBase.prototype.assert_BuyLink_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert Buy Link is NOT exists.');
    this.assertFalse(this.page.BuyLink.isPresent(),msgOptions,'Assert Buy Link is NOT exists.');
    return this;
  };

  DetailFlowBase.prototype.get_BuyLink_IsExists = function (callback) {
    this.logDebug('Get if Buy Link is exists.');
    this.page.BuyLink.isPresent().then(callback);
    return this;
  };



  // Control functions for LeaseLink
  DetailFlowBase.prototype.click_LeaseLink = function () {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Lease Link. '+msg);
    });
    this.page.LeaseLink.click();
    return this;
  };





  // Wait functions for LeaseLink
  DetailFlowBase.prototype.wait_LeaseLink_Displayed = function () {
    this.logDebug('Wait until Lease Link displayed');
    this.page.LeaseLink.waitPresent(true);
    return this;
  };

  DetailFlowBase.prototype.wait_LeaseLink_Disappeared = function () {
    this.logDebug('Wait until Lease Link disappeared');
    this.page.LeaseLink.waitForDisappear();
    return this;
  };

  // Assert functions for LeaseLink
  DetailFlowBase.prototype.assert_LeaseLink_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert Lease Link contains text: ' + text);
    this.assertIsContain(this.page.LeaseLink.getText(), text,msgOptions,'Assert Lease Link contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert Lease Link does not contain text: ' + text);
    this.assertIsNotContain(this.page.LeaseLink.getText(), text,msgOptions,'Assert Lease Link does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert Lease Link text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.LeaseLink.getText(), pattern, msgOptions, 'Assert Lease Link text match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert Lease Link attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.LeaseLink.getAttribute(attribute), text,msgOptions,'Assert Lease Link attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert Lease Link attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.LeaseLink.getAttribute(attribute), text,msgOptions,'Assert Lease Link attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert Lease Link attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.LeaseLink.getAttribute(attribute), pattern,msgOptions,'Assert Lease Link attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert Lease Link is displayed.');
    this.assertTrue(this.page.LeaseLink.isDisplayed(),msgOptions,'Assert Lease Link is displayed.');
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert Lease Link is NOT displayed.');
    this.assertFalse(this.page.LeaseLink.isDisplayed(),msgOptions,'Assert Lease Link is NOT displayed.');
    return this;
  };

  DetailFlowBase.prototype.get_LeaseLink_IsDisplayed = function (callback) {
    this.logDebug('Get Lease Link Displayed state.');
    this.page.LeaseLink.isDisplayed().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert Lease Link is enabled.');
    this.assertTrue(this.page.LeaseLink.isEnabled(),msgOptions,'Assert Lease Link is enabled.');
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert Lease Link is disabled.');
    this.assertFalse(this.page.LeaseLink.isEnabled(),msgOptions,'Assert Lease Link is not enabled.');
    return this;
  };

  DetailFlowBase.prototype.get_LeaseLink_IsEnabled = function (callback) {
    this.logDebug('Get Lease Link Enabled state.');
    this.page.LeaseLink.isEnabled().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_IsExists = function (msgOptions) {
    //this.logDebug('Assert Lease Link is exists.');
    this.assertTrue(this.page.LeaseLink.isPresent(),msgOptions,'Assert Lease Link is exists.');
    return this;
  };

  DetailFlowBase.prototype.assert_LeaseLink_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert Lease Link is NOT exists.');
    this.assertFalse(this.page.LeaseLink.isPresent(),msgOptions,'Assert Lease Link is NOT exists.');
    return this;
  };

  DetailFlowBase.prototype.get_LeaseLink_IsExists = function (callback) {
    this.logDebug('Get if Lease Link is exists.');
    this.page.LeaseLink.isPresent().then(callback);
    return this;
  };



  // Control functions for Term60MonthLabel

  DetailFlowBase.prototype.getText_Term60MonthLabel = function (callback) {
    this.logDebug('Get Term60Month Label text');
    this.page.Term60MonthLabel.getText().then(callback);
    return this;
  };
  DetailFlowBase.prototype.click_Term60MonthLabel = function (callback) {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Term60Month Label. '+msg);
    });
    this.page.Term60MonthLabel.click();
    return this;
  };




  // Wait functions for Term60MonthLabel
  DetailFlowBase.prototype.wait_Term60MonthLabel_Displayed = function () {
    this.logDebug('Wait until Term60Month Label displayed');
    this.page.Term60MonthLabel.waitPresent(true);
    return this;
  };

  DetailFlowBase.prototype.wait_Term60MonthLabel_Disappeared = function () {
    this.logDebug('Wait until Term60Month Label disappeared');
    this.page.Term60MonthLabel.waitForDisappear();
    return this;
  };

  // Assert functions for Term60MonthLabel
  DetailFlowBase.prototype.assert_Term60MonthLabel_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert Term60Month Label contains text: ' + text);
    this.assertIsContain(this.page.Term60MonthLabel.getText(), text,msgOptions,'Assert Term60Month Label contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert Term60Month Label does not contain text: ' + text);
    this.assertIsNotContain(this.page.Term60MonthLabel.getText(), text,msgOptions,'Assert Term60Month Label does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert Term60Month Label text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.Term60MonthLabel.getText(), pattern, msgOptions, 'Assert Term60Month Label text match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert Term60Month Label attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.Term60MonthLabel.getAttribute(attribute), text,msgOptions,'Assert Term60Month Label attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert Term60Month Label attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.Term60MonthLabel.getAttribute(attribute), text,msgOptions,'Assert Term60Month Label attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert Term60Month Label attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.Term60MonthLabel.getAttribute(attribute), pattern,msgOptions,'Assert Term60Month Label attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert Term60Month Label is displayed.');
    this.assertTrue(this.page.Term60MonthLabel.isDisplayed(),msgOptions,'Assert Term60Month Label is displayed.');
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert Term60Month Label is NOT displayed.');
    this.assertFalse(this.page.Term60MonthLabel.isDisplayed(),msgOptions,'Assert Term60Month Label is NOT displayed.');
    return this;
  };

  DetailFlowBase.prototype.get_Term60MonthLabel_IsDisplayed = function (callback) {
    this.logDebug('Get Term60Month Label Displayed state.');
    this.page.Term60MonthLabel.isDisplayed().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert Term60Month Label is enabled.');
    this.assertTrue(this.page.Term60MonthLabel.isEnabled(),msgOptions,'Assert Term60Month Label is enabled.');
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert Term60Month Label is disabled.');
    this.assertFalse(this.page.Term60MonthLabel.isEnabled(),msgOptions,'Assert Term60Month Label is not enabled.');
    return this;
  };

  DetailFlowBase.prototype.get_Term60MonthLabel_IsEnabled = function (callback) {
    this.logDebug('Get Term60Month Label Enabled state.');
    this.page.Term60MonthLabel.isEnabled().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_IsExists = function (msgOptions) {
    //this.logDebug('Assert Term60Month Label is exists.');
    this.assertTrue(this.page.Term60MonthLabel.isPresent(),msgOptions,'Assert Term60Month Label is exists.');
    return this;
  };

  DetailFlowBase.prototype.assert_Term60MonthLabel_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert Term60Month Label is NOT exists.');
    this.assertFalse(this.page.Term60MonthLabel.isPresent(),msgOptions,'Assert Term60Month Label is NOT exists.');
    return this;
  };

  DetailFlowBase.prototype.get_Term60MonthLabel_IsExists = function (callback) {
    this.logDebug('Get if Term60Month Label is exists.');
    this.page.Term60MonthLabel.isPresent().then(callback);
    return this;
  };



  // Control functions for Term60DueLabel

  DetailFlowBase.prototype.getText_Term60DueLabel = function (callback) {
    this.logDebug('Get Term60Due Label text');
    this.page.Term60DueLabel.getText().then(callback);
    return this;
  };
  DetailFlowBase.prototype.click_Term60DueLabel = function (callback) {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Term60Due Label. '+msg);
    });
    this.page.Term60DueLabel.click();
    return this;
  };




  // Wait functions for Term60DueLabel
  DetailFlowBase.prototype.wait_Term60DueLabel_Displayed = function () {
    this.logDebug('Wait until Term60Due Label displayed');
    this.page.Term60DueLabel.waitPresent(true);
    return this;
  };

  DetailFlowBase.prototype.wait_Term60DueLabel_Disappeared = function () {
    this.logDebug('Wait until Term60Due Label disappeared');
    this.page.Term60DueLabel.waitForDisappear();
    return this;
  };

  // Assert functions for Term60DueLabel
  DetailFlowBase.prototype.assert_Term60DueLabel_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert Term60Due Label contains text: ' + text);
    this.assertIsContain(this.page.Term60DueLabel.getText(), text,msgOptions,'Assert Term60Due Label contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert Term60Due Label does not contain text: ' + text);
    this.assertIsNotContain(this.page.Term60DueLabel.getText(), text,msgOptions,'Assert Term60Due Label does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert Term60Due Label text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.Term60DueLabel.getText(), pattern, msgOptions, 'Assert Term60Due Label text match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert Term60Due Label attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.Term60DueLabel.getAttribute(attribute), text,msgOptions,'Assert Term60Due Label attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert Term60Due Label attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.Term60DueLabel.getAttribute(attribute), text,msgOptions,'Assert Term60Due Label attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert Term60Due Label attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.Term60DueLabel.getAttribute(attribute), pattern,msgOptions,'Assert Term60Due Label attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert Term60Due Label is displayed.');
    this.assertTrue(this.page.Term60DueLabel.isDisplayed(),msgOptions,'Assert Term60Due Label is displayed.');
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert Term60Due Label is NOT displayed.');
    this.assertFalse(this.page.Term60DueLabel.isDisplayed(),msgOptions,'Assert Term60Due Label is NOT displayed.');
    return this;
  };

  DetailFlowBase.prototype.get_Term60DueLabel_IsDisplayed = function (callback) {
    this.logDebug('Get Term60Due Label Displayed state.');
    this.page.Term60DueLabel.isDisplayed().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert Term60Due Label is enabled.');
    this.assertTrue(this.page.Term60DueLabel.isEnabled(),msgOptions,'Assert Term60Due Label is enabled.');
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert Term60Due Label is disabled.');
    this.assertFalse(this.page.Term60DueLabel.isEnabled(),msgOptions,'Assert Term60Due Label is not enabled.');
    return this;
  };

  DetailFlowBase.prototype.get_Term60DueLabel_IsEnabled = function (callback) {
    this.logDebug('Get Term60Due Label Enabled state.');
    this.page.Term60DueLabel.isEnabled().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_IsExists = function (msgOptions) {
    //this.logDebug('Assert Term60Due Label is exists.');
    this.assertTrue(this.page.Term60DueLabel.isPresent(),msgOptions,'Assert Term60Due Label is exists.');
    return this;
  };

  DetailFlowBase.prototype.assert_Term60DueLabel_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert Term60Due Label is NOT exists.');
    this.assertFalse(this.page.Term60DueLabel.isPresent(),msgOptions,'Assert Term60Due Label is NOT exists.');
    return this;
  };

  DetailFlowBase.prototype.get_Term60DueLabel_IsExists = function (callback) {
    this.logDebug('Get if Term60Due Label is exists.');
    this.page.Term60DueLabel.isPresent().then(callback);
    return this;
  };



  // Control functions for NavbarToggleButton
  DetailFlowBase.prototype.click_NavbarToggleButton = function () {
        var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click NavbarToggle Button. '+msg);
    });
    this.page.NavbarToggleButton.click();
    return this;
  };





  // Wait functions for NavbarToggleButton
  DetailFlowBase.prototype.wait_NavbarToggleButton_Displayed = function () {
    this.logDebug('Wait until NavbarToggle Button displayed');
    this.page.NavbarToggleButton.waitPresent(true);
    return this;
  };

  DetailFlowBase.prototype.wait_NavbarToggleButton_Disappeared = function () {
    this.logDebug('Wait until NavbarToggle Button disappeared');
    this.page.NavbarToggleButton.waitForDisappear();
    return this;
  };

  // Assert functions for NavbarToggleButton
  DetailFlowBase.prototype.assert_NavbarToggleButton_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button contains text: ' + text);
    this.assertIsContain(this.page.NavbarToggleButton.getText(), text,msgOptions,'Assert NavbarToggle Button contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button does not contain text: ' + text);
    this.assertIsNotContain(this.page.NavbarToggleButton.getText(), text,msgOptions,'Assert NavbarToggle Button does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.NavbarToggleButton.getText(), pattern, msgOptions, 'Assert NavbarToggle Button text match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.NavbarToggleButton.getAttribute(attribute), text,msgOptions,'Assert NavbarToggle Button attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.NavbarToggleButton.getAttribute(attribute), text,msgOptions,'Assert NavbarToggle Button attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.NavbarToggleButton.getAttribute(attribute), pattern,msgOptions,'Assert NavbarToggle Button attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is displayed.');
    this.assertTrue(this.page.NavbarToggleButton.isDisplayed(),msgOptions,'Assert NavbarToggle Button is displayed.');
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is NOT displayed.');
    this.assertFalse(this.page.NavbarToggleButton.isDisplayed(),msgOptions,'Assert NavbarToggle Button is NOT displayed.');
    return this;
  };

  DetailFlowBase.prototype.get_NavbarToggleButton_IsDisplayed = function (callback) {
    this.logDebug('Get NavbarToggle Button Displayed state.');
    this.page.NavbarToggleButton.isDisplayed().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is enabled.');
    this.assertTrue(this.page.NavbarToggleButton.isEnabled(),msgOptions,'Assert NavbarToggle Button is enabled.');
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is disabled.');
    this.assertFalse(this.page.NavbarToggleButton.isEnabled(),msgOptions,'Assert NavbarToggle Button is not enabled.');
    return this;
  };

  DetailFlowBase.prototype.get_NavbarToggleButton_IsEnabled = function (callback) {
    this.logDebug('Get NavbarToggle Button Enabled state.');
    this.page.NavbarToggleButton.isEnabled().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_IsExists = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is exists.');
    this.assertTrue(this.page.NavbarToggleButton.isPresent(),msgOptions,'Assert NavbarToggle Button is exists.');
    return this;
  };

  DetailFlowBase.prototype.assert_NavbarToggleButton_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is NOT exists.');
    this.assertFalse(this.page.NavbarToggleButton.isPresent(),msgOptions,'Assert NavbarToggle Button is NOT exists.');
    return this;
  };

  DetailFlowBase.prototype.get_NavbarToggleButton_IsExists = function (callback) {
    this.logDebug('Get if NavbarToggle Button is exists.');
    this.page.NavbarToggleButton.isPresent().then(callback);
    return this;
  };



  // Control functions for MenuLargePaymentEstimatorButton
  DetailFlowBase.prototype.click_MenuLargePaymentEstimatorButton = function () {
        var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click MenuLargePaymentEstimator Button. '+msg);
    });
    this.page.MenuLargePaymentEstimatorButton.click();
    return this;
  };





  // Wait functions for MenuLargePaymentEstimatorButton
  DetailFlowBase.prototype.wait_MenuLargePaymentEstimatorButton_Displayed = function () {
    this.logDebug('Wait until MenuLargePaymentEstimator Button displayed');
    this.page.MenuLargePaymentEstimatorButton.waitPresent(true);
    return this;
  };

  DetailFlowBase.prototype.wait_MenuLargePaymentEstimatorButton_Disappeared = function () {
    this.logDebug('Wait until MenuLargePaymentEstimator Button disappeared');
    this.page.MenuLargePaymentEstimatorButton.waitForDisappear();
    return this;
  };

  // Assert functions for MenuLargePaymentEstimatorButton
  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button contains text: ' + text);
    this.assertIsContain(this.page.MenuLargePaymentEstimatorButton.getText(), text,msgOptions,'Assert MenuLargePaymentEstimator Button contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button does not contain text: ' + text);
    this.assertIsNotContain(this.page.MenuLargePaymentEstimatorButton.getText(), text,msgOptions,'Assert MenuLargePaymentEstimator Button does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.MenuLargePaymentEstimatorButton.getText(), pattern, msgOptions, 'Assert MenuLargePaymentEstimator Button text match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.MenuLargePaymentEstimatorButton.getAttribute(attribute), text,msgOptions,'Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.MenuLargePaymentEstimatorButton.getAttribute(attribute), text,msgOptions,'Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.MenuLargePaymentEstimatorButton.getAttribute(attribute), pattern,msgOptions,'Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is displayed.');
    this.assertTrue(this.page.MenuLargePaymentEstimatorButton.isDisplayed(),msgOptions,'Assert MenuLargePaymentEstimator Button is displayed.');
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is NOT displayed.');
    this.assertFalse(this.page.MenuLargePaymentEstimatorButton.isDisplayed(),msgOptions,'Assert MenuLargePaymentEstimator Button is NOT displayed.');
    return this;
  };

  DetailFlowBase.prototype.get_MenuLargePaymentEstimatorButton_IsDisplayed = function (callback) {
    this.logDebug('Get MenuLargePaymentEstimator Button Displayed state.');
    this.page.MenuLargePaymentEstimatorButton.isDisplayed().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is enabled.');
    this.assertTrue(this.page.MenuLargePaymentEstimatorButton.isEnabled(),msgOptions,'Assert MenuLargePaymentEstimator Button is enabled.');
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is disabled.');
    this.assertFalse(this.page.MenuLargePaymentEstimatorButton.isEnabled(),msgOptions,'Assert MenuLargePaymentEstimator Button is not enabled.');
    return this;
  };

  DetailFlowBase.prototype.get_MenuLargePaymentEstimatorButton_IsEnabled = function (callback) {
    this.logDebug('Get MenuLargePaymentEstimator Button Enabled state.');
    this.page.MenuLargePaymentEstimatorButton.isEnabled().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsExists = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is exists.');
    this.assertTrue(this.page.MenuLargePaymentEstimatorButton.isPresent(),msgOptions,'Assert MenuLargePaymentEstimator Button is exists.');
    return this;
  };

  DetailFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is NOT exists.');
    this.assertFalse(this.page.MenuLargePaymentEstimatorButton.isPresent(),msgOptions,'Assert MenuLargePaymentEstimator Button is NOT exists.');
    return this;
  };

  DetailFlowBase.prototype.get_MenuLargePaymentEstimatorButton_IsExists = function (callback) {
    this.logDebug('Get if MenuLargePaymentEstimator Button is exists.');
    this.page.MenuLargePaymentEstimatorButton.isPresent().then(callback);
    return this;
  };



  // Control functions for MenuSmallPaymentEstimatorButton
  DetailFlowBase.prototype.click_MenuSmallPaymentEstimatorButton = function () {
        var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click MenuSmallPaymentEstimator Button. '+msg);
    });
    this.page.MenuSmallPaymentEstimatorButton.click();
    return this;
  };





  // Wait functions for MenuSmallPaymentEstimatorButton
  DetailFlowBase.prototype.wait_MenuSmallPaymentEstimatorButton_Displayed = function () {
    this.logDebug('Wait until MenuSmallPaymentEstimator Button displayed');
    this.page.MenuSmallPaymentEstimatorButton.waitPresent(true);
    return this;
  };

  DetailFlowBase.prototype.wait_MenuSmallPaymentEstimatorButton_Disappeared = function () {
    this.logDebug('Wait until MenuSmallPaymentEstimator Button disappeared');
    this.page.MenuSmallPaymentEstimatorButton.waitForDisappear();
    return this;
  };

  // Assert functions for MenuSmallPaymentEstimatorButton
  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button contains text: ' + text);
    this.assertIsContain(this.page.MenuSmallPaymentEstimatorButton.getText(), text,msgOptions,'Assert MenuSmallPaymentEstimator Button contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button does not contain text: ' + text);
    this.assertIsNotContain(this.page.MenuSmallPaymentEstimatorButton.getText(), text,msgOptions,'Assert MenuSmallPaymentEstimator Button does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.MenuSmallPaymentEstimatorButton.getText(), pattern, msgOptions, 'Assert MenuSmallPaymentEstimator Button text match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.MenuSmallPaymentEstimatorButton.getAttribute(attribute), text,msgOptions,'Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.MenuSmallPaymentEstimatorButton.getAttribute(attribute), text,msgOptions,'Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.MenuSmallPaymentEstimatorButton.getAttribute(attribute), pattern,msgOptions,'Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is displayed.');
    this.assertTrue(this.page.MenuSmallPaymentEstimatorButton.isDisplayed(),msgOptions,'Assert MenuSmallPaymentEstimator Button is displayed.');
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is NOT displayed.');
    this.assertFalse(this.page.MenuSmallPaymentEstimatorButton.isDisplayed(),msgOptions,'Assert MenuSmallPaymentEstimator Button is NOT displayed.');
    return this;
  };

  DetailFlowBase.prototype.get_MenuSmallPaymentEstimatorButton_IsDisplayed = function (callback) {
    this.logDebug('Get MenuSmallPaymentEstimator Button Displayed state.');
    this.page.MenuSmallPaymentEstimatorButton.isDisplayed().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is enabled.');
    this.assertTrue(this.page.MenuSmallPaymentEstimatorButton.isEnabled(),msgOptions,'Assert MenuSmallPaymentEstimator Button is enabled.');
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is disabled.');
    this.assertFalse(this.page.MenuSmallPaymentEstimatorButton.isEnabled(),msgOptions,'Assert MenuSmallPaymentEstimator Button is not enabled.');
    return this;
  };

  DetailFlowBase.prototype.get_MenuSmallPaymentEstimatorButton_IsEnabled = function (callback) {
    this.logDebug('Get MenuSmallPaymentEstimator Button Enabled state.');
    this.page.MenuSmallPaymentEstimatorButton.isEnabled().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsExists = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is exists.');
    this.assertTrue(this.page.MenuSmallPaymentEstimatorButton.isPresent(),msgOptions,'Assert MenuSmallPaymentEstimator Button is exists.');
    return this;
  };

  DetailFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is NOT exists.');
    this.assertFalse(this.page.MenuSmallPaymentEstimatorButton.isPresent(),msgOptions,'Assert MenuSmallPaymentEstimator Button is NOT exists.');
    return this;
  };

  DetailFlowBase.prototype.get_MenuSmallPaymentEstimatorButton_IsExists = function (callback) {
    this.logDebug('Get if MenuSmallPaymentEstimator Button is exists.');
    this.page.MenuSmallPaymentEstimatorButton.isPresent().then(callback);
    return this;
  };



  // Control functions for LoadingLabel

  DetailFlowBase.prototype.getText_LoadingLabel = function (callback) {
    this.logDebug('Get Loading Label text');
    this.page.LoadingLabel.getText().then(callback);
    return this;
  };
  DetailFlowBase.prototype.click_LoadingLabel = function (callback) {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Loading Label. '+msg);
    });
    this.page.LoadingLabel.click();
    return this;
  };




  // Wait functions for LoadingLabel
  DetailFlowBase.prototype.wait_LoadingLabel_Displayed = function () {
    this.logDebug('Wait until Loading Label displayed');
    this.page.LoadingLabel.waitPresent(true);
    return this;
  };

  DetailFlowBase.prototype.wait_LoadingLabel_Disappeared = function () {
    this.logDebug('Wait until Loading Label disappeared');
    this.page.LoadingLabel.waitForDisappear();
    return this;
  };

  // Assert functions for LoadingLabel
  DetailFlowBase.prototype.assert_LoadingLabel_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert Loading Label contains text: ' + text);
    this.assertIsContain(this.page.LoadingLabel.getText(), text,msgOptions,'Assert Loading Label contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert Loading Label does not contain text: ' + text);
    this.assertIsNotContain(this.page.LoadingLabel.getText(), text,msgOptions,'Assert Loading Label does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert Loading Label text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.LoadingLabel.getText(), pattern, msgOptions, 'Assert Loading Label text match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert Loading Label attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.LoadingLabel.getAttribute(attribute), text,msgOptions,'Assert Loading Label attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert Loading Label attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.LoadingLabel.getAttribute(attribute), text,msgOptions,'Assert Loading Label attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert Loading Label attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.LoadingLabel.getAttribute(attribute), pattern,msgOptions,'Assert Loading Label attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert Loading Label is displayed.');
    this.assertTrue(this.page.LoadingLabel.isDisplayed(),msgOptions,'Assert Loading Label is displayed.');
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert Loading Label is NOT displayed.');
    this.assertFalse(this.page.LoadingLabel.isDisplayed(),msgOptions,'Assert Loading Label is NOT displayed.');
    return this;
  };

  DetailFlowBase.prototype.get_LoadingLabel_IsDisplayed = function (callback) {
    this.logDebug('Get Loading Label Displayed state.');
    this.page.LoadingLabel.isDisplayed().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert Loading Label is enabled.');
    this.assertTrue(this.page.LoadingLabel.isEnabled(),msgOptions,'Assert Loading Label is enabled.');
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert Loading Label is disabled.');
    this.assertFalse(this.page.LoadingLabel.isEnabled(),msgOptions,'Assert Loading Label is not enabled.');
    return this;
  };

  DetailFlowBase.prototype.get_LoadingLabel_IsEnabled = function (callback) {
    this.logDebug('Get Loading Label Enabled state.');
    this.page.LoadingLabel.isEnabled().then(callback);
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_IsExists = function (msgOptions) {
    //this.logDebug('Assert Loading Label is exists.');
    this.assertTrue(this.page.LoadingLabel.isPresent(),msgOptions,'Assert Loading Label is exists.');
    return this;
  };

  DetailFlowBase.prototype.assert_LoadingLabel_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert Loading Label is NOT exists.');
    this.assertFalse(this.page.LoadingLabel.isPresent(),msgOptions,'Assert Loading Label is NOT exists.');
    return this;
  };

  DetailFlowBase.prototype.get_LoadingLabel_IsExists = function (callback) {
    this.logDebug('Get if Loading Label is exists.');
    this.page.LoadingLabel.isPresent().then(callback);
    return this;
  };



/*
switch(c.Type)
{
	case ControlTypes.Dropdown:
	  RenderDropdown(page, c);
	  break;
}
*/

module.exports = DetailFlowBase;

