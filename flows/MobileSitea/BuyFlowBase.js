// ------------------------------------------------------------------------------
//      This code was generated by handlebars/grunt.
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// ------------------------------------------------------------------------------

var BuyPage = require('./../../pages/MobileSitea/BuyPage.js');
var FlowBase = require('./../../flows/baseFlow.js');


function BuyFlowBase(checkUrl, goto) {
    checkUrl = checkUrl || false;
    goto = goto || false;
    this.page = new BuyPage();
    FlowBase.call(this, checkUrl, this.page.pageUrl, goto);
};

BuyFlowBase.prototype = new FlowBase();

BuyFlowBase.prototype.constructor = BuyFlowBase;



  // Control functions for RecalculateButton
  BuyFlowBase.prototype.click_RecalculateButton = function () {
        var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Recalculate Button. '+msg);
    });
    this.page.RecalculateButton.click();
    return this;
  };





  // Assert functions for RecalculateButton
  BuyFlowBase.prototype.assert_RecalculateButton_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert Recalculate Button contains text: ' + text);
    this.assertIsContain(this.page.RecalculateButton.getText(), text,msgOptions,'Assert Recalculate Button contains text: ' + text);
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert Recalculate Button does not contain text: ' + text);
    this.assertIsNotContain(this.page.RecalculateButton.getText(), text,msgOptions,'Assert Recalculate Button does not contain text: ' + text);
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert Recalculate Button text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.RecalculateButton.getText(), pattern, msgOptions, 'Assert Recalculate Button text match pattern: ' + pattern);
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert Recalculate Button attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.RecalculateButton.getAttribute(attribute), text,msgOptions,'Assert Recalculate Button attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert Recalculate Button attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.RecalculateButton.getAttribute(attribute), text,msgOptions,'Assert Recalculate Button attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert Recalculate Button attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.RecalculateButton.getAttribute(attribute), pattern,msgOptions,'Assert Recalculate Button attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert Recalculate Button is displayed.');
    this.assertTrue(this.page.RecalculateButton.isDisplayed(),msgOptions,'Assert Recalculate Button is displayed.');
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert Recalculate Button is NOT displayed.');
    this.assertFalse(this.page.RecalculateButton.isDisplayed(),msgOptions,'Assert Recalculate Button is NOT displayed.');
    return this;
  };

  BuyFlowBase.prototype.get_RecalculateButton_IsDisplayed = function (callback) {
    this.logDebug('Get Recalculate Button Displayed state.');
    this.page.RecalculateButton.isDisplayed().then(callback);
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert Recalculate Button is enabled.');
    this.assertTrue(this.page.RecalculateButton.isEnabled(),msgOptions,'Assert Recalculate Button is enabled.');
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert Recalculate Button is disabled.');
    this.assertFalse(this.page.RecalculateButton.isEnabled(),msgOptions,'Assert Recalculate Button is not enabled.');
    return this;
  };

  BuyFlowBase.prototype.get_RecalculateButton_IsEnabled = function (callback) {
    this.logDebug('Get Recalculate Button Enabled state.');
    this.page.RecalculateButton.isEnabled().then(callback);
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_IsExists = function (msgOptions) {
    //this.logDebug('Assert Recalculate Button is exists.');
    this.assertTrue(this.page.RecalculateButton.isPresent(),msgOptions,'Assert Recalculate Button is exists.');
    return this;
  };

  BuyFlowBase.prototype.assert_RecalculateButton_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert Recalculate Button is NOT exists.');
    this.assertFalse(this.page.RecalculateButton.isPresent(),msgOptions,'Assert Recalculate Button is NOT exists.');
    return this;
  };

  BuyFlowBase.prototype.get_RecalculateButton_IsExists = function (callback) {
    this.logDebug('Get if Recalculate Button is exists.');
    this.page.RecalculateButton.isPresent().then(callback);
    return this;
  };



/*
switch(c.Type)
{
	case ControlTypes.Dropdown:
	  RenderDropdown(page, c);
	  break;
}
*/

module.exports = BuyFlowBase;

