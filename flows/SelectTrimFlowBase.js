// ------------------------------------------------------------------------------
//      This code was generated by handlebars/grunt.
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// ------------------------------------------------------------------------------

var SelectTrimPage = require('./../pages/SelectTrimPage.js');
var FlowBase = require('./../flows/baseFlow.js');


function SelectTrimFlowBase(checkUrl, goto) {
    checkUrl = checkUrl || false;
    goto = goto || false;
    this.page = new SelectTrimPage();
    FlowBase.call(this, checkUrl, this.page.pageUrl, goto);
};

SelectTrimFlowBase.prototype = new FlowBase();

SelectTrimFlowBase.prototype.constructor = SelectTrimFlowBase;


  // Navigation for TrimLink
  SelectTrimFlowBase.prototype.click_TrimLink_NavigateTo_DetailFlow = function () {
        var that = this;
      var DetailFlow = require('./../flows/DetailFlow.js');
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Trim Link then navigate to DetailFlow. '+msg);
    });
    this.page.TrimLink.click();
    return new DetailFlow(true, false);
  };

  // Control functions for TrimLink
  SelectTrimFlowBase.prototype.click_TrimLink = function () {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Trim Link. '+msg);
    });
    this.page.TrimLink.click();
    return this;
  };





  // Wait functions for TrimLink
  SelectTrimFlowBase.prototype.wait_TrimLink_Displayed = function () {
    this.logDebug('Wait until Trim Link displayed');
    this.page.TrimLink.waitPresent(true);
    return this;
  };

  SelectTrimFlowBase.prototype.wait_TrimLink_Disappeared = function () {
    this.logDebug('Wait until Trim Link disappeared');
    this.page.TrimLink.waitForDisappear();
    return this;
  };

  // Assert functions for TrimLink
  SelectTrimFlowBase.prototype.assert_TrimLink_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert Trim Link contains text: ' + text);
    this.assertIsContain(this.page.TrimLink.getText(), text,msgOptions,'Assert Trim Link contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert Trim Link does not contain text: ' + text);
    this.assertIsNotContain(this.page.TrimLink.getText(), text,msgOptions,'Assert Trim Link does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert Trim Link text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.TrimLink.getText(), pattern, msgOptions, 'Assert Trim Link text match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert Trim Link attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.TrimLink.getAttribute(attribute), text,msgOptions,'Assert Trim Link attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert Trim Link attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.TrimLink.getAttribute(attribute), text,msgOptions,'Assert Trim Link attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert Trim Link attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.TrimLink.getAttribute(attribute), pattern,msgOptions,'Assert Trim Link attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert Trim Link is displayed.');
    this.assertTrue(this.page.TrimLink.isDisplayed(),msgOptions,'Assert Trim Link is displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert Trim Link is NOT displayed.');
    this.assertFalse(this.page.TrimLink.isDisplayed(),msgOptions,'Assert Trim Link is NOT displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_TrimLink_IsDisplayed = function (callback) {
    this.logDebug('Get Trim Link Displayed state.');
    this.page.TrimLink.isDisplayed().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert Trim Link is enabled.');
    this.assertTrue(this.page.TrimLink.isEnabled(),msgOptions,'Assert Trim Link is enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert Trim Link is disabled.');
    this.assertFalse(this.page.TrimLink.isEnabled(),msgOptions,'Assert Trim Link is not enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_TrimLink_IsEnabled = function (callback) {
    this.logDebug('Get Trim Link Enabled state.');
    this.page.TrimLink.isEnabled().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_IsExists = function (msgOptions) {
    //this.logDebug('Assert Trim Link is exists.');
    this.assertTrue(this.page.TrimLink.isPresent(),msgOptions,'Assert Trim Link is exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_TrimLink_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert Trim Link is NOT exists.');
    this.assertFalse(this.page.TrimLink.isPresent(),msgOptions,'Assert Trim Link is NOT exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_TrimLink_IsExists = function (callback) {
    this.logDebug('Get if Trim Link is exists.');
    this.page.TrimLink.isPresent().then(callback);
    return this;
  };



  // Control functions for NavbarToggleButton
  SelectTrimFlowBase.prototype.click_NavbarToggleButton = function () {
        var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click NavbarToggle Button. '+msg);
    });
    this.page.NavbarToggleButton.click();
    return this;
  };





  // Wait functions for NavbarToggleButton
  SelectTrimFlowBase.prototype.wait_NavbarToggleButton_Displayed = function () {
    this.logDebug('Wait until NavbarToggle Button displayed');
    this.page.NavbarToggleButton.waitPresent(true);
    return this;
  };

  SelectTrimFlowBase.prototype.wait_NavbarToggleButton_Disappeared = function () {
    this.logDebug('Wait until NavbarToggle Button disappeared');
    this.page.NavbarToggleButton.waitForDisappear();
    return this;
  };

  // Assert functions for NavbarToggleButton
  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button contains text: ' + text);
    this.assertIsContain(this.page.NavbarToggleButton.getText(), text,msgOptions,'Assert NavbarToggle Button contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button does not contain text: ' + text);
    this.assertIsNotContain(this.page.NavbarToggleButton.getText(), text,msgOptions,'Assert NavbarToggle Button does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.NavbarToggleButton.getText(), pattern, msgOptions, 'Assert NavbarToggle Button text match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.NavbarToggleButton.getAttribute(attribute), text,msgOptions,'Assert NavbarToggle Button attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.NavbarToggleButton.getAttribute(attribute), text,msgOptions,'Assert NavbarToggle Button attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert NavbarToggle Button attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.NavbarToggleButton.getAttribute(attribute), pattern,msgOptions,'Assert NavbarToggle Button attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is displayed.');
    this.assertTrue(this.page.NavbarToggleButton.isDisplayed(),msgOptions,'Assert NavbarToggle Button is displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is NOT displayed.');
    this.assertFalse(this.page.NavbarToggleButton.isDisplayed(),msgOptions,'Assert NavbarToggle Button is NOT displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_NavbarToggleButton_IsDisplayed = function (callback) {
    this.logDebug('Get NavbarToggle Button Displayed state.');
    this.page.NavbarToggleButton.isDisplayed().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is enabled.');
    this.assertTrue(this.page.NavbarToggleButton.isEnabled(),msgOptions,'Assert NavbarToggle Button is enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is disabled.');
    this.assertFalse(this.page.NavbarToggleButton.isEnabled(),msgOptions,'Assert NavbarToggle Button is not enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_NavbarToggleButton_IsEnabled = function (callback) {
    this.logDebug('Get NavbarToggle Button Enabled state.');
    this.page.NavbarToggleButton.isEnabled().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_IsExists = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is exists.');
    this.assertTrue(this.page.NavbarToggleButton.isPresent(),msgOptions,'Assert NavbarToggle Button is exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_NavbarToggleButton_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert NavbarToggle Button is NOT exists.');
    this.assertFalse(this.page.NavbarToggleButton.isPresent(),msgOptions,'Assert NavbarToggle Button is NOT exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_NavbarToggleButton_IsExists = function (callback) {
    this.logDebug('Get if NavbarToggle Button is exists.');
    this.page.NavbarToggleButton.isPresent().then(callback);
    return this;
  };



  // Control functions for MenuLargePaymentEstimatorButton
  SelectTrimFlowBase.prototype.click_MenuLargePaymentEstimatorButton = function () {
        var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click MenuLargePaymentEstimator Button. '+msg);
    });
    this.page.MenuLargePaymentEstimatorButton.click();
    return this;
  };





  // Wait functions for MenuLargePaymentEstimatorButton
  SelectTrimFlowBase.prototype.wait_MenuLargePaymentEstimatorButton_Displayed = function () {
    this.logDebug('Wait until MenuLargePaymentEstimator Button displayed');
    this.page.MenuLargePaymentEstimatorButton.waitPresent(true);
    return this;
  };

  SelectTrimFlowBase.prototype.wait_MenuLargePaymentEstimatorButton_Disappeared = function () {
    this.logDebug('Wait until MenuLargePaymentEstimator Button disappeared');
    this.page.MenuLargePaymentEstimatorButton.waitForDisappear();
    return this;
  };

  // Assert functions for MenuLargePaymentEstimatorButton
  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button contains text: ' + text);
    this.assertIsContain(this.page.MenuLargePaymentEstimatorButton.getText(), text,msgOptions,'Assert MenuLargePaymentEstimator Button contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button does not contain text: ' + text);
    this.assertIsNotContain(this.page.MenuLargePaymentEstimatorButton.getText(), text,msgOptions,'Assert MenuLargePaymentEstimator Button does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.MenuLargePaymentEstimatorButton.getText(), pattern, msgOptions, 'Assert MenuLargePaymentEstimator Button text match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.MenuLargePaymentEstimatorButton.getAttribute(attribute), text,msgOptions,'Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.MenuLargePaymentEstimatorButton.getAttribute(attribute), text,msgOptions,'Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.MenuLargePaymentEstimatorButton.getAttribute(attribute), pattern,msgOptions,'Assert MenuLargePaymentEstimator Button attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is displayed.');
    this.assertTrue(this.page.MenuLargePaymentEstimatorButton.isDisplayed(),msgOptions,'Assert MenuLargePaymentEstimator Button is displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is NOT displayed.');
    this.assertFalse(this.page.MenuLargePaymentEstimatorButton.isDisplayed(),msgOptions,'Assert MenuLargePaymentEstimator Button is NOT displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_MenuLargePaymentEstimatorButton_IsDisplayed = function (callback) {
    this.logDebug('Get MenuLargePaymentEstimator Button Displayed state.');
    this.page.MenuLargePaymentEstimatorButton.isDisplayed().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is enabled.');
    this.assertTrue(this.page.MenuLargePaymentEstimatorButton.isEnabled(),msgOptions,'Assert MenuLargePaymentEstimator Button is enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is disabled.');
    this.assertFalse(this.page.MenuLargePaymentEstimatorButton.isEnabled(),msgOptions,'Assert MenuLargePaymentEstimator Button is not enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_MenuLargePaymentEstimatorButton_IsEnabled = function (callback) {
    this.logDebug('Get MenuLargePaymentEstimator Button Enabled state.');
    this.page.MenuLargePaymentEstimatorButton.isEnabled().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsExists = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is exists.');
    this.assertTrue(this.page.MenuLargePaymentEstimatorButton.isPresent(),msgOptions,'Assert MenuLargePaymentEstimator Button is exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuLargePaymentEstimatorButton_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert MenuLargePaymentEstimator Button is NOT exists.');
    this.assertFalse(this.page.MenuLargePaymentEstimatorButton.isPresent(),msgOptions,'Assert MenuLargePaymentEstimator Button is NOT exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_MenuLargePaymentEstimatorButton_IsExists = function (callback) {
    this.logDebug('Get if MenuLargePaymentEstimator Button is exists.');
    this.page.MenuLargePaymentEstimatorButton.isPresent().then(callback);
    return this;
  };



  // Control functions for MenuSmallPaymentEstimatorButton
  SelectTrimFlowBase.prototype.click_MenuSmallPaymentEstimatorButton = function () {
        var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click MenuSmallPaymentEstimator Button. '+msg);
    });
    this.page.MenuSmallPaymentEstimatorButton.click();
    return this;
  };





  // Wait functions for MenuSmallPaymentEstimatorButton
  SelectTrimFlowBase.prototype.wait_MenuSmallPaymentEstimatorButton_Displayed = function () {
    this.logDebug('Wait until MenuSmallPaymentEstimator Button displayed');
    this.page.MenuSmallPaymentEstimatorButton.waitPresent(true);
    return this;
  };

  SelectTrimFlowBase.prototype.wait_MenuSmallPaymentEstimatorButton_Disappeared = function () {
    this.logDebug('Wait until MenuSmallPaymentEstimator Button disappeared');
    this.page.MenuSmallPaymentEstimatorButton.waitForDisappear();
    return this;
  };

  // Assert functions for MenuSmallPaymentEstimatorButton
  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button contains text: ' + text);
    this.assertIsContain(this.page.MenuSmallPaymentEstimatorButton.getText(), text,msgOptions,'Assert MenuSmallPaymentEstimator Button contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button does not contain text: ' + text);
    this.assertIsNotContain(this.page.MenuSmallPaymentEstimatorButton.getText(), text,msgOptions,'Assert MenuSmallPaymentEstimator Button does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.MenuSmallPaymentEstimatorButton.getText(), pattern, msgOptions, 'Assert MenuSmallPaymentEstimator Button text match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.MenuSmallPaymentEstimatorButton.getAttribute(attribute), text,msgOptions,'Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.MenuSmallPaymentEstimatorButton.getAttribute(attribute), text,msgOptions,'Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.MenuSmallPaymentEstimatorButton.getAttribute(attribute), pattern,msgOptions,'Assert MenuSmallPaymentEstimator Button attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is displayed.');
    this.assertTrue(this.page.MenuSmallPaymentEstimatorButton.isDisplayed(),msgOptions,'Assert MenuSmallPaymentEstimator Button is displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is NOT displayed.');
    this.assertFalse(this.page.MenuSmallPaymentEstimatorButton.isDisplayed(),msgOptions,'Assert MenuSmallPaymentEstimator Button is NOT displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_MenuSmallPaymentEstimatorButton_IsDisplayed = function (callback) {
    this.logDebug('Get MenuSmallPaymentEstimator Button Displayed state.');
    this.page.MenuSmallPaymentEstimatorButton.isDisplayed().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is enabled.');
    this.assertTrue(this.page.MenuSmallPaymentEstimatorButton.isEnabled(),msgOptions,'Assert MenuSmallPaymentEstimator Button is enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is disabled.');
    this.assertFalse(this.page.MenuSmallPaymentEstimatorButton.isEnabled(),msgOptions,'Assert MenuSmallPaymentEstimator Button is not enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_MenuSmallPaymentEstimatorButton_IsEnabled = function (callback) {
    this.logDebug('Get MenuSmallPaymentEstimator Button Enabled state.');
    this.page.MenuSmallPaymentEstimatorButton.isEnabled().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsExists = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is exists.');
    this.assertTrue(this.page.MenuSmallPaymentEstimatorButton.isPresent(),msgOptions,'Assert MenuSmallPaymentEstimator Button is exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_MenuSmallPaymentEstimatorButton_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert MenuSmallPaymentEstimator Button is NOT exists.');
    this.assertFalse(this.page.MenuSmallPaymentEstimatorButton.isPresent(),msgOptions,'Assert MenuSmallPaymentEstimator Button is NOT exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_MenuSmallPaymentEstimatorButton_IsExists = function (callback) {
    this.logDebug('Get if MenuSmallPaymentEstimator Button is exists.');
    this.page.MenuSmallPaymentEstimatorButton.isPresent().then(callback);
    return this;
  };



  // Control functions for LoadingLabel

  SelectTrimFlowBase.prototype.getText_LoadingLabel = function (callback) {
    this.logDebug('Get Loading Label text');
    this.page.LoadingLabel.getText().then(callback);
    return this;
  };
  SelectTrimFlowBase.prototype.click_LoadingLabel = function (callback) {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click Loading Label. '+msg);
    });
    this.page.LoadingLabel.click();
    return this;
  };




  // Wait functions for LoadingLabel
  SelectTrimFlowBase.prototype.wait_LoadingLabel_Displayed = function () {
    this.logDebug('Wait until Loading Label displayed');
    this.page.LoadingLabel.waitPresent(true);
    return this;
  };

  SelectTrimFlowBase.prototype.wait_LoadingLabel_Disappeared = function () {
    this.logDebug('Wait until Loading Label disappeared');
    this.page.LoadingLabel.waitForDisappear();
    return this;
  };

  // Assert functions for LoadingLabel
  SelectTrimFlowBase.prototype.assert_LoadingLabel_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert Loading Label contains text: ' + text);
    this.assertIsContain(this.page.LoadingLabel.getText(), text,msgOptions,'Assert Loading Label contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert Loading Label does not contain text: ' + text);
    this.assertIsNotContain(this.page.LoadingLabel.getText(), text,msgOptions,'Assert Loading Label does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert Loading Label text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.LoadingLabel.getText(), pattern, msgOptions, 'Assert Loading Label text match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert Loading Label attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.LoadingLabel.getAttribute(attribute), text,msgOptions,'Assert Loading Label attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert Loading Label attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.LoadingLabel.getAttribute(attribute), text,msgOptions,'Assert Loading Label attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert Loading Label attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.LoadingLabel.getAttribute(attribute), pattern,msgOptions,'Assert Loading Label attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert Loading Label is displayed.');
    this.assertTrue(this.page.LoadingLabel.isDisplayed(),msgOptions,'Assert Loading Label is displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert Loading Label is NOT displayed.');
    this.assertFalse(this.page.LoadingLabel.isDisplayed(),msgOptions,'Assert Loading Label is NOT displayed.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_LoadingLabel_IsDisplayed = function (callback) {
    this.logDebug('Get Loading Label Displayed state.');
    this.page.LoadingLabel.isDisplayed().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert Loading Label is enabled.');
    this.assertTrue(this.page.LoadingLabel.isEnabled(),msgOptions,'Assert Loading Label is enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert Loading Label is disabled.');
    this.assertFalse(this.page.LoadingLabel.isEnabled(),msgOptions,'Assert Loading Label is not enabled.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_LoadingLabel_IsEnabled = function (callback) {
    this.logDebug('Get Loading Label Enabled state.');
    this.page.LoadingLabel.isEnabled().then(callback);
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_IsExists = function (msgOptions) {
    //this.logDebug('Assert Loading Label is exists.');
    this.assertTrue(this.page.LoadingLabel.isPresent(),msgOptions,'Assert Loading Label is exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.assert_LoadingLabel_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert Loading Label is NOT exists.');
    this.assertFalse(this.page.LoadingLabel.isPresent(),msgOptions,'Assert Loading Label is NOT exists.');
    return this;
  };

  SelectTrimFlowBase.prototype.get_LoadingLabel_IsExists = function (callback) {
    this.logDebug('Get if Loading Label is exists.');
    this.page.LoadingLabel.isPresent().then(callback);
    return this;
  };



/*
switch(c.Type)
{
	case ControlTypes.Dropdown:
	  RenderDropdown(page, c);
	  break;
}
*/

module.exports = SelectTrimFlowBase;

