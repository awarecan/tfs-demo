// ------------------------------------------------------------------------------
//      This code was generated by handlebars/grunt.
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// ------------------------------------------------------------------------------

var {{PageName}}Page = require('./../pages/{{PageName}}Page.js');
var FlowBase = require('./../flows/baseFlow.js');


function {{PageName}}FlowBase(checkUrl, goto) {
    checkUrl = checkUrl || false;
    goto = goto || false;
    this.page = new {{PageName}}Page();
    FlowBase.call(this, checkUrl, this.page.pageUrl, goto);
};

{{PageName}}FlowBase.prototype = new FlowBase();

{{PageName}}FlowBase.prototype.constructor = {{PageName}}FlowBase;

{{#if Controls}}
{{#each Controls}}

  {{#if NavigateFlows}}
  // Navigation for {{@key}}{{Type}}
  {{#each NavigateFlows}}
  {{../../PageName}}FlowBase.prototype.click_{{@../key}}{{../Type}}_NavigateTo_{{this}} = function () {
        var that = this;
      var {{this}} = require('./../flows/{{this}}.js');
      this.takeScreenForLog(function(msg){
      that.logDebug('Click {{@../key}} {{../Type}} then navigate to {{this}}. '+msg);
    });
    this.page.{{@../key}}{{../Type}}.click();
    return new {{this}}(true, false);
  };
  {{/each}}
  {{/if}}

  // Control functions for {{@key}}{{Type}}
  {{#ifx Type '==' 'Button'}}
  {{../PageName}}FlowBase.prototype.click_{{@key}}Button = function () {
        var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click {{@key}} Button. '+msg);
    });
    this.page.{{@key}}Button.click();
    return this;
  };
  {{/ifx}}
  {{#ifx Type '==' 'Link'}}
  {{../PageName}}FlowBase.prototype.click_{{@key}}Link = function () {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click {{@key}} Link. '+msg);
    });
    this.page.{{@key}}Link.click();
    return this;
  };
  {{/ifx}}

  {{#ifx Type '==' 'Label'}}
  {{../PageName}}FlowBase.prototype.getText_{{@key}}Label = function (callback) {
    this.logDebug('Get {{@key}} Label text');
    this.page.{{@key}}Label.getText().then(callback);
    return this;
  };
  {{../PageName}}FlowBase.prototype.click_{{@key}}Label = function (callback) {
      var that = this;
      this.takeScreenForLog(function(msg){
      that.logDebug('Click {{@key}} Label. '+msg);
    });
    this.page.{{@key}}Label.click();
    return this;
  };
  {{/ifx}}

  {{#ifx Type '==' 'CheckBox'}}
    {{../PageName}}FlowBase.prototype.getIsSelected_{{@key}}CheckBox = function (callback) {
        this.logDebug('Get {{@key}} CheckBox Select State.');
      this.page.{{@key}}CheckBox.isSelected().then(callback);
      return this;
    };
    {{../PageName}}FlowBase.prototype.assertIsSelected_{{@key}}CheckBox = function (msgOptions) {
      this.logDebug('Assert {{@key}}  CheckBox Is Selected.');
      //this.page.{{@key}}CheckBox.waitPresent();
      this.assertTrue(this.page.{{@key}}CheckBox.isSelected(),msgOptions,'Assert {{@key}}  CheckBox Is Selected.');
      return this;
    };
    {{../PageName}}FlowBase.prototype.assertIsNotSelected_{{@key}}CheckBox = function (msgOptions) {
      this.logDebug('Assert {{@key}} CheckBox Is Not Selected.');
      //this.page.{{@key}}CheckBox.waitPresent();
      this.assertFalse(this.page.{{@key}}CheckBox.isSelected(),msgOptions,'Assert {{@key}} CheckBox Is Not Selected.');
      return this;
    };
    {{../PageName}}FlowBase.prototype.select_{{@key}}CheckBox = function () {
      this.logDebug('Select {{@key}} CheckBox .');
      this.page.{{@key}}CheckBox.setState(true);
      return this;
    };
    {{../PageName}}FlowBase.prototype.unselect_{{@key}}CheckBox = function () {
      this.logDebug('UnSelect {{@key}} CheckBox .');
      this.page.{{@key}}CheckBox.setState(false);
      return this;
    };
  {{/ifx}}

  {{#ifx Type '==' 'RadioButton'}}
    {{../PageName}}FlowBase.prototype.getIsSelected_{{@key}}RadioButton = function (callback) {
      this.logDebug('Get {{@key}} RadioButton Select State.');
      this.page.{{@key}}RadioButton.isSelected().then(callback);
      return this;
    };
    {{../PageName}}FlowBase.prototype.assertIsSelected_{{@key}}RadioButton = function (msgOptions) {
      this.logDebug('Assert {{@key}}  RadioButton Is Selected.');
      this.assertTrue(this.page.{{@key}}RadioButton.isSelected(),msgOptions,'Assert {{@key}}  RadioButton Is Selected.');
      return this;
    };
    {{../PageName}}FlowBase.prototype.assertIsNotSelected_{{@key}}RadioButton= function (msgOptions) {
      this.logDebug('Assert {{@key}} RadioButton Is Not Selected.');
      this.assertFalse(this.page.{{@key}}RadioButton.isSelected(),msgOptions,'Assert {{@key}} RadioButton Is Not Selected.');
      return this;
    };
    {{../PageName}}FlowBase.prototype.select_{{@key}}RadioButton = function () {
      this.logDebug('Select {{@key}} RadioButton .');
      this.page.{{@key}}RadioButton.select();
      return this;
    };
  {{/ifx}}

  {{#ifx Type '==' 'TextBox'}}
  {{../PageName}}FlowBase.prototype.getValue_{{@key}}TextBox = function (callback) {
    this.logDebug('Get {{@key}} TextBox value');
    this.page.{{@key}}TextBox.getValue().then(callback);
    return this;
  };

  {{../PageName}}FlowBase.prototype.setValue_{{@key}}TextBox = function (value) {
    this.logDebug('Set {{@key}} TextBox value as: ' + value);
    this.page.{{@key}}TextBox.setValue(value);
    return this;
  };

  {{../PageName}}FlowBase.prototype.addValue_{{@key}}TextBox = function (value) {
    this.logDebug('Add {{@key}} TextBox value: ' + value);
    this.page.{{@key}}TextBox.addValue(value);
    return this;
  };

  {{../PageName}}FlowBase.prototype.clear_{{@key}}TextBox = function() {
    this.logDebug('Clear {{@key}} TextBox.');
    this.page.{{@key}}TextBox.clear();
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}TextBox_TextEqual = function (expectValue,msgOptions) {
    //this.logDebug('Assert {{@key}} TextBox Value Equals:' + expectValue);
    this.assertAreEqual(this.page.{{@key}}TextBox.getValue(), expectValue,msgOptions,'Assert {{@key}} TextBox Text Equals: ' + expectValue);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}TextBox_TextNotEqual = function (expectValue,msgOptions) {
    //this.logDebug('Assert {{@key}} TextBox Value Not Equals:'+expectValue);
    this.assertAreNotEqual(this.page.{{@key}}TextBox.getValue(), expectValue,msgOptions,'Assert {{@key}} TextBox Text Not Equals: '+expectValue);
    return this;
  };
  {{/ifx}}

  // Wait functions for {{@key}}{{Type}}
  {{../PageName}}FlowBase.prototype.wait_{{@key}}{{Type}}_Displayed = function () {
    this.logDebug('Wait until {{@key}} {{Type}} displayed');
    this.page.{{@key}}{{Type}}.waitPresent(true);
    return this;
  };

  {{../PageName}}FlowBase.prototype.wait_{{@key}}{{Type}}_Disappeared = function () {
    this.logDebug('Wait until {{@key}} {{Type}} disappeared');
    this.page.{{@key}}{{Type}}.waitForDisappear();
    return this;
  };

  // Assert functions for {{@key}}{{Type}}
  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_ContainText = function (text,msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} contains text: ' + text);
    this.assertIsContain(this.page.{{@key}}{{Type}}.getText(), text,msgOptions,'Assert {{@key}} {{Type}} contains text: ' + text);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_NotContainText = function (text,msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} does not contain text: ' + text);
    this.assertIsNotContain(this.page.{{@key}}{{Type}}.getText(), text,msgOptions,'Assert {{@key}} {{Type}} does not contain text: ' + text);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_TextMatchPattern = function (pattern,msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} text match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.{{@key}}{{Type}}.getText(), pattern, msgOptions, 'Assert {{@key}} {{Type}} text match pattern: ' + pattern);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_Attribute_ContainText = function (attribute, text,msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} attribute[' + attribute + '] contains text: ' + text);
    this.assertIsContain(this.page.{{@key}}{{Type}}.getAttribute(attribute), text,msgOptions,'Assert {{@key}} {{Type}} attribute[' + attribute + '] contains text: ' + text);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_Attribute_NotContainText = function (attribute,text,msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} attribute[' + attribute + '] does not contain text: ' + text);
    this.assertIsNotContain(this.page.{{@key}}{{Type}}.getAttribute(attribute), text,msgOptions,'Assert {{@key}} {{Type}} attribute[' + attribute + '] does not contain text: ' + text);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_Attribute_MatchPattern = function (attribute,pattern,msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} attribute[' + attribute + '] match pattern: ' + pattern);
    this.assertIsMatchPattern(this.page.{{@key}}{{Type}}.getAttribute(attribute), pattern,msgOptions,'Assert {{@key}} {{Type}} attribute[' + attribute + '] match pattern: ' + pattern);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_IsDisplayed = function (msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} is displayed.');
    this.assertTrue(this.page.{{@key}}{{Type}}.isDisplayed(),msgOptions,'Assert {{@key}} {{Type}} is displayed.');
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_IsNotDisplayed = function (msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} is NOT displayed.');
    this.assertFalse(this.page.{{@key}}{{Type}}.isDisplayed(),msgOptions,'Assert {{@key}} {{Type}} is NOT displayed.');
    return this;
  };

  {{../PageName}}FlowBase.prototype.get_{{@key}}{{Type}}_IsDisplayed = function (callback) {
    this.logDebug('Get {{@key}} {{Type}} Displayed state.');
    this.page.{{@key}}{{Type}}.isDisplayed().then(callback);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_IsEnabled = function (msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} is enabled.');
    this.assertTrue(this.page.{{@key}}{{Type}}.isEnabled(),msgOptions,'Assert {{@key}} {{Type}} is enabled.');
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_IsNotEnabled = function (msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} is disabled.');
    this.assertFalse(this.page.{{@key}}{{Type}}.isEnabled(),msgOptions,'Assert {{@key}} {{Type}} is not enabled.');
    return this;
  };

  {{../PageName}}FlowBase.prototype.get_{{@key}}{{Type}}_IsEnabled = function (callback) {
    this.logDebug('Get {{@key}} {{Type}} Enabled state.');
    this.page.{{@key}}{{Type}}.isEnabled().then(callback);
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_IsExists = function (msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} is exists.');
    this.assertTrue(this.page.{{@key}}{{Type}}.isPresent(),msgOptions,'Assert {{@key}} {{Type}} is exists.');
    return this;
  };

  {{../PageName}}FlowBase.prototype.assert_{{@key}}{{Type}}_IsNotExists = function (msgOptions) {
    //this.logDebug('Assert {{@key}} {{Type}} is NOT exists.');
    this.assertFalse(this.page.{{@key}}{{Type}}.isPresent(),msgOptions,'Assert {{@key}} {{Type}} is NOT exists.');
    return this;
  };

  {{../PageName}}FlowBase.prototype.get_{{@key}}{{Type}}_IsExists = function (callback) {
    this.logDebug('Get if {{@key}} {{Type}} is exists.');
    this.page.{{@key}}{{Type}}.isPresent().then(callback);
    return this;
  };

{{/each}}
{{/if}}

{{#if Tables}}
    {{#each Tables}}
        {{../PageName}}FlowBase.prototype.getRowCount_{{@key}}Table = function (callback) {
          this.logDebug('Get row count of {{@key}} Table');
          this.page.{{@key}}Table.rowCount().then(callback);
          return this;
        };

        {{../PageName}}FlowBase.prototype.getValue_{{@key}}Table = function (colname, callback) {
          this.logDebug('Get ' + colname + ' of {{@key}} Table as an Array');
          this.page.{{@key}}Table.getValue(colname).then(callback);
          return this;
        };

        {{../PageName}}FlowBase.prototype.assert_{{@key}}Table_HasContent = function (msgOptions) {
          //this.logDebug('Assert {{@key}} Table has content.');
          this.assertIsGreaterThan(this.page.{{@key}}Table.rowCount(), 0, msgOptions,'Assert {{@key}} Table has content.');
          return this;
        };
    {{/each}}
{{/if}}

{{#if Repeats}}
  {{#each Repeats}}
    {{../PageName}}FlowBase.prototype.click_{{@key}}Repeat = function (rowIndex,columnIndex) {
      var that = this;
      this.takeScreenForLog(function(msg){
        that.logDebug('Click {{@key}} Repeat[row:'+rowIndex+',column:'+columnIndex+']. '+msg);
      });
      this.page.{{@key}}Repeat.click(rowIndex-1,columnIndex-1);
      return this;
    };

    {{../PageName}}FlowBase.prototype.Assert_{{@key}}Repeat_ContainText = function (rowIndex,columnIndex,text,msgOptions) {
      this.assertIsContain(this.page.{{@key}}Repeat.getText(rowIndex-1,columnIndex-1), text,msgOptions,'Assert {{@key}} Repeat[row:'+rowIndex+',column:'+columnIndex+'] contains text: ' + text);
      return this;
    };

    {{../PageName}}FlowBase.prototype.Assert_{{@key}}Repeat_NotContainText = function (rowIndex,columnIndex,text,msgOptions) {
      this.assertIsNotContain(this.page.{{@key}}Repeat.getText(rowIndex-1,columnIndex-1), text,msgOptions,'Assert {{@key}} Repeat[row:'+rowIndex+',column:'+columnIndex+'] contains text: ' + text);
      return this;
    };
  {{/each}}
{{/if}}
/*
switch(c.Type)
{
	case ControlTypes.Dropdown:
	  RenderDropdown(page, c);
	  break;
}
*/

module.exports = {{PageName}}FlowBase;

